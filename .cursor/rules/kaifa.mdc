---
description: 本地开发
globs: 本地开发
---
以下是设置 Refly 进行开发的步骤：

1. Fork 此仓库
2. 克隆仓库
从你的终端克隆分叉的存储库：

git clone git@github.com:<github_username>/refly.git
3.验证依赖项
Refly 需要以下依赖项来构建：

Docker
Docker 组成
Node.js v20.x (LTS)
4.安装
Refly 由多个以 monorepo 结构管理的包组成。主要组件包括：

Web 应用程序（apps/web/）：主 Web 界面
API 服务器（apps/api/）：后端服务器
AI 工作区通用（packages/ai-workspace-common/）：共享 AI 工作区 UI 组件
i18n（packages/i18n/）：国际化支持
请按照以下步骤进行安装：

启动所有中间件：
cd deploy/docker
docker-compose -f docker-compose.middleware.yml up -d
安装依赖项：
corepack enable
pnpm install
为 API 和 Web 设置环境变量：
cp apps/web/.env.example apps/web/.env
cp apps/api/.env.example apps/api/.env
开始开发：
pnpm build
pnpm dev
您可以访问http://localhost:5173开始开发 Refly。

发展
为了帮助您快速找到适合您的贡献，这里简要概述了 Refly 的结构：

后端结构
[apps/server/]             // Main server application
├── src/
│   ├── controllers/      // API route handlers
│   ├── services/        // Business logic implementation
│   ├── models/          // Data models and types
│   ├── ai/              // AI feature implementations
│   │   ├── llm/        // LLM integration and management
│   │   ├── rag/        // RAG pipeline implementation
│   │   └── memory/     // Context memory management
│   ├── canvas/         // Canvas-related backend services
│   └── utils/          // Shared utilities

[packages/]
├── ai-core/            // Core AI functionality
│   ├── src/
│   │   ├── llm/       // LLM abstraction and implementations
│   │   ├── memory/    // Memory systems
│   │   └── rag/       // RAG implementations
│
└── shared/            // Shared types and utilities
    └── src/
        └── types/     // Common TypeScript types
后端采用 Nest.js 和 TypeScript 构建，重点关注：

AI 功能实现，包括 LLM 集成、RAG 管道和上下文内存
画布状态管理和实时协作
用于实时功能的 RESTful API 和 WebSocket 连接
知识库的高效数据存储和检索
前端结构
[apps/web/]                 // Main web application
├── src/
│   ├── components/         // React components
│   ├── styles/            // Global styles and themes
│   └── main.tsx           // Application entry point

[packages/]
├── ai-workspace-common/   // Shared AI workspace components
│   ├── src/
│   │   ├── components/    // Canvas, editor, and AI feature components
│   │   └── utils/        // Shared utilities
│
└── i18n/                 // Internationalization
    ├── src/
    │   ├── en-US/        // English translations
    │   └── zh-Hans/      // Chinese translations